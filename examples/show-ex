#!/usr/bin/env python3

from pprint import pprint
from jaf import jaf, jafError
from jaf.dsl.parse import parse_dsl
from typing import List, Dict
import logging
import argparse
import json
import sys
import os

def show_ex(data: List[Dict],
            query: List,
            expected_matching_indices: List[Dict] = None,
            expected_values: Dict = None,
            show_query: bool = True) -> None:

    if show_query:
        print("[Query]:")
        pprint(query)
        print()

    try:
        results = jaf(data, query)
        if expected_matching_indices is not None:
            if results['matching-indices'] == expected_matching_indices:
                print("[success]: Results match expected results")
            else:
                print("[failure]: Results do not match expected results")
        if expected_values is not None:
            if results['value-results'] == expected_values:
                print("[success]: Results match expected results")
            else:
                print("[failure]: Results do not match expected results")
    except jafError as e:
        print(f"jafError: {e}", file=sys.stderr)
        sys.exit(1)

    print("[Results]:")
    pprint(results)

def main():
    parser = argparse.ArgumentParser(description='jaf Example')
    parser.add_argument('--log-level', '-l', type=str, default='INFO', help='Logging level')
    parser.add_argument('--data', '-d', type=str, help='JSON array file representing the data to filter')
    parser.add_argument('--query', '-q', type=str, help='JSON array representing the AST query to apply, or if the file ends with .txt, it is a DSL query')
    parser.add_argument('--show-data', action=argparse.BooleanOptionalAction, help='Show data')
    parser.add_argument('--show-query', action=argparse.BooleanOptionalAction, help='Show query')
    parser.add_argument('--apply-to-data', action=argparse.BooleanOptionalAction, help='Apply query to data')
    parser.add_argument('--expected-matching-indices', '-ei', type=str, help='JSON array representing the expected results of the matching-indices')
    parser.add_argument('--expected-values', '-ev', type=str, help='JSON array representing the expected results of the values')
    parser.add_argument('--query-files-startswith', '-qfs', type=str, help='Process query files that start with this string')

    args = parser.parse_args()

    if args.query is None and args.query_files_startswith is None:
        parser.error('Either --query or --query-files-startswith must be provided')

    logger = logging.getLogger(__name__)
    logging.basicConfig(level=args.log_level)

    try:
        with open(args.data, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Data file not found: {args.data}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Invalid JSON in data file {args.data}: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Failed to load data file {args.data}: {e}", file=sys.stderr)
        sys.exit(1)

    if args.show_data:
        s = '-'*33 + " [Begin Data] " + '-'*33
        print(s)
        pprint(data)
        print('-'*34 + " [End Data] " + '-'*34)

    if args.query_files_startswith is not None:
        query_files = [f for f in os.listdir('.') if f.startswith(args.query_files_startswith)]
        # sort by filename
        query_files.sort()
        print(f"\nApplying the following query files to data:")
        for query_file in query_files:
            print(f"- {query_file}")
        for query_file in query_files:
            print()
            print(f"-"*80)
            print(f"Processing query file: {query_file}")
            print(f"-"*80)
            try:
                query = None
                # if extension is .txt, it's a DSL query
                if query_file.endswith('.txt'):
                    with open(query_file, 'r') as f:
                        query_dsl = f.read().strip()
                        if args.show_query:
                            print(f"[Query DSL]:")
                            print(query_dsl)
                            print()
                        query = parse_dsl(query_dsl)
                else:
                    with open(query_file, 'r') as f:
                        query = json.load(f)
            except json.JSONDecodeError as e:
                print(f"Invalid JSON in query file {query_file}: {e}", file=sys.stderr)
                continue
            except FileNotFoundError:
                print(f"Query file not found: {query_file}", file=sys.stderr)
                continue
            except Exception as e:
                print(f"Failed to load query file {query_file}: {e}", file=sys.stderr)
                continue

            if args.apply_to_data:
                show_ex(data=data,
                        query=query,
                        expected_matching_indices=args.expected_matching_indices,
                        expected_values=args.expected_values,
                        show_query=args.show_query)
            else:
                print(f"[Query]:")
                pprint(query)
                print()

    if args.query is not None:
        try:
            if args.query.endswith('.txt'):
                with open(args.query, 'r') as f:
                    query_dsl = f.read().strip()
                    if args.show_query:
                        print(f"[Query DSL]:")
                        print(query_dsl)
                        print()
                    query = parse_dsl(query_dsl)
            else:
                with open(args.query, 'r') as f:
                    query = json.load(f)
        except FileNotFoundError:
            print(f"Query file not found: {args.query}", file=sys.stderr)
            sys.exit(1)
        except json.JSONDecodeError as e:
            print(f"Invalid JSON in query file {args.query}: {e}", file=sys.stderr)
            sys.exit(1)
        except Exception as e:
            print(f"Failed to load query file {args.query}: {e}", file=sys.stderr)
            sys.exit(1)

        if args.apply_to_data:            
            show_ex(data=data,
                    query=query,
                    expected_matching_indices=args.expected_matching_indices,
                    expected_values=args.expected_values,
                    show_query=args.show_query)
        else:
            print(f"[Query]:")
            pprint(query)
            print()

if __name__ == '__main__':
    main()