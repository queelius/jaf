%import common.WS
%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%ignore WS
%ignore /\/\/[^\n]*/          // // comments

start: expr

// ── Boolean (infix) ───────────────────────────────────────
?expr: or_expr
?or_expr: and_expr
        | or_expr OR and_expr           -> or_operation
?and_expr: not_expr
         | and_expr AND not_expr        -> and_operation
?not_expr: NOT not_expr                 -> not_operation
         | atom

// ── Atoms ─────────────────────────────────────────────────
?atom: comparison
     | unary_exists_expr
     | function_call
     | path                              -> eval_path_directly_as_boolean
     | BOOLEAN
     | "(" expr ")"

// ── Comparison / exists? ──────────────────────────────────
comparison: value COMP_OP value         -> condition
unary_exists_expr: path "exists?"

// ── Values (function args, etc.) ──────────────────────────
?value: path
      | function_call
      | ESCAPED_STRING
      | SIGNED_NUMBER
      | BOOLEAN
      | "null"                         -> null_literal

// ── Function call (IDENTIFIER **or** comparison op) ───────
?callable_id: IDENTIFIER
           | EQ | NEQ | GT | GTE | LT | LTE
           | IN | STARTS_WITH | ENDS_WITH
           | REGEX_MATCH | CLOSE_MATCH | PARTIAL_MATCH
function_call: callable_id "(" [value ("," value)*] ")"

// ── Path syntax ───────────────────────────────────────────
path: ":" path_component ("." path_component)*
path_component: IDENTIFIER | INT | DOUBLESTAR | STAR
DOUBLESTAR: "**"
STAR: "*"

// ── Comparison operator tokens (also usable as callable_id) ─
EQ: "eq?"
NEQ: "neq?"
GT: "gt?"
GTE: "gte?"
LT: "lt?"
LTE: "lte?"
IN: "in?"
STARTS_WITH: "starts-with?"
ENDS_WITH: "ends-with?"
REGEX_MATCH: "regex-match?"
CLOSE_MATCH: "close-match?"
PARTIAL_MATCH: "partial-match?"
COMP_OP: EQ|NEQ|GT|GTE|LT|LTE|IN
       | STARTS_WITH|ENDS_WITH|REGEX_MATCH
       | CLOSE_MATCH|PARTIAL_MATCH

// ── Logical operator tokens ───────────────────────────────
OR: /(OR|or)/
AND: /(AND|and)/
NOT: /(NOT|not)/

// ── Primitive terminals (priority!) ───────────────────────
BOOLEAN.3: "true" | "false"
INT.2: /[0-9]+/
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_-]*/
